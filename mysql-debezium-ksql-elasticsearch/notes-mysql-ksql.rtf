{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf400
\cocoascreenfonts1{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww15400\viewh10600\viewkind0
\deftab1120
\pard\pardeftab1120\pardirnatural\partightenfactor0

\f0\fs22 \cf0 \
** Pre-Prep **\
\
Start up:\
./scripts/setup.sh\
\
\
UIs:\
\
C3:\
http://localhost:9021\
\
\
Kibana Ratings:\
\
http://localhost:5601/app/kibana#/discover?_g=(refreshInterval:('$$hashKey':'object:315',display:'1%20seconds',pause:!f,section:1,value:1000),time:(from:now-15m,mode:quick,to:now))&_a=(columns:!(_source),index:jfokus19,interval:auto,query:(language:lucene,query:''),sort:!(_score,desc))\
\
\
\
Kibana unhappy VIPs:\
\
\
http://localhost:5601/app/kibana#/dashboard/mysql-ksql-kafka-es?_g=(refreshInterval:('$$hashKey':'object:229',display:'30%20seconds',pause:!f,section:1,value:30000),time:(from:now-15m,mode:quick,to:now))&_a=(description:'',filters:!(),fullScreenMode:!f,options:(darkTheme:!f,hidePanelTitles:!f,useMargins:!t),panels:!gridData:(h:15,i:'1',w:24,x:0,y:10),id:'0c118530-31d5-11e8-a6be-09f3e3eb4b97',panelIndex:'1',type:visualization,version:'6.3.0'),(gridData:(h:10,i:'2',w:48,x:0,y:35),id:'39803a20-31d5-11e8-a6be-09f3e3eb4b97',panelIndex:'2',type:visualization,version:'6.3.0'),(gridData:(h:10,i:'4',w:8,x:0,y:0),id:'5ef922e0-6ff0-11e8-8fa0-279444e59a8f',panelIndex:'4',type:visualization,version:'6.3.0'),(gridData:(h:10,i:'5',w:40,x:8,y:0),id:'2f3d2290-6ff0-11e8-8fa0-279444e59a8f',panelIndex:'5',type:search,version:'6.3.0'),(gridData:(h:15,i:'6',w:24,x:24,y:10),id:c6344a70-6ff0-11e8-8fa0-279444e59a8f,panelIndex:'6',type:visualization,version:'6.3.0'),(embeddableConfig:(),gridData:(h:10,i:'7',w:48,x:0,y:25),id:'11a6f6b0-31d5-11e8-a6be-09f3e3eb4b97',panelIndex:'7',sort:!(EXTRACT_TS,desc),type:search,version:'6.3.0',query:(language:lucene,query:''),timeRestore:!f,title:'Ratings%20Data',viewMode:view)\
\
\
\
\
Terminal Tabs:\
\
KSQL CLI:\
docker run --network docker-compose_default --interactive --tty --rm \\\
     confluentinc/cp-ksql-cli:5.0.1 \\\
     http://ksql-server:8088\
\
\
MySQL CLI:\
docker-compose exec mysql bash -c 'mysql -u $MYSQL_USER -p$MYSQL_PASSWORD demo'\
\
\
\
**** DEMO START HERE ****\
\
\
MySQL Stuff:\
\

\fs24 show tables;\

\fs22 SELECT ID, FIRST_NAME, LAST_NAME, EMAIL, CLUB_STATUS FROM CUSTOMERS LIMIT 5;\
\
\
*Show Customers topic data stream in C3* \
\
Note : no data shows\'85because only from now forwards.\
\
Add new customer in mysql, and see it pop up in C3\
INSERT INTO CUSTOMERS (ID,FIRST_NAME,LAST_NAME) VALUES (42,'Rick','Astley');\
\
Update existing customer:\
\
MySQL:\
UPDATE CUSTOMERS SET CLUB_STATUS = 'Bronze' where ID=1;\
UPDATE CUSTOMERS SET CLUB_STATUS = 'platinum' where ID=1;\
\
*Show ratings topic data stream ini C3*\
\
KSQL:\
CREATE STREAM RATINGS WITH (KAFKA_TOPIC='ratings',VALUE_FORMAT='AVRO');\
SELECT STARS, CHANNEL, MESSAGE FROM RATINGS WHERE STARS<3;\
\
CREATE STREAM POOR_REVIEWS AS SELECT STARS, CHANNEL, MESSAGE FROM RATINGS WHERE STARS<3;\
SELECT * FROM POOR_REVIEWS LIMIT 5;\
\
Create a customer stream:\
\
*KSQL CLI*:\
\
Use the query properties in C3 KSQL ui to set this!!\
\
SET 'auto.offset.reset' = 'earliest';\
\
CREATE STREAM CUSTOMERS_STREAM_SRC WITH (KAFKA_TOPIC='asgard.demo.CUSTOMERS', VALUE_FORMAT='AVRO');\
CREATE STREAM CUSTOMERS_STREAM WITH (PARTITIONS=1) AS SELECT * FROM CUSTOMERS_STREAM_SRC PARTITION BY ID;\
\
*Skip this?*\
    SELECT ID, FIRST_NAME, LAST_NAME, CLUB_STATUS FROM CUSTOMERS_STREAM WHERE ID=1;\
\
    * MySQL *\
    UPDATE CUSTOMERS SET CLUB_STATUS = 'Bronze' where ID=1;\
    UPDATE CUSTOMERS SET CLUB_STATUS = 'platinum' where ID=1;\
****\
\
Create a customers ktable (because usually we only care about latest info for customers, not historical):\
CREATE TABLE CUSTOMERS WITH (KAFKA_TOPIC='CUSTOMERS_STREAM', VALUE_FORMAT ='AVRO', KEY='ID');\
\
Select customer feedback with customer data:\
\
\
SELECT R.RATING_ID, R.MESSAGE, \
      C.ID, C.FIRST_NAME + ' ' + C.LAST_NAME AS FULL_NAME, \
      C.CLUB_STATUS \
      FROM RATINGS R \
        LEFT JOIN CUSTOMERS C \
        ON R.USER_ID = C.ID \
      WHERE C.FIRST_NAME IS NOT NULL;\
\
\
We are only streaming this to UI, persist this back to Kafka:\
\
Persist this as a stream:\
\
CREATE STREAM RATINGS_WITH_CUSTOMER_DATA \
       WITH (PARTITIONS=1, \
             KAFKA_TOPIC='ratings-enriched') \
       AS \
SELECT R.RATING_ID, R.MESSAGE, R.STARS, R.CHANNEL,\
      C.ID, C.FIRST_NAME + ' ' + C.LAST_NAME AS FULL_NAME, \
      C.CLUB_STATUS, C.EMAIL \
      FROM RATINGS R \
        LEFT JOIN CUSTOMERS C \
        ON R.USER_ID = C.ID \
      WHERE C.FIRST_NAME IS NOT NULL;\
\
\
* GOTO THE elastic UI and show this -it\'92ll be on there automatically*\
\
Unhappy VIPs:\
\
CREATE STREAM UNHAPPY_PLATINUM_CUSTOMERS \
       WITH (VALUE_FORMAT='JSON', PARTITIONS=1) AS \
SELECT FULL_NAME, CLUB_STATUS, EMAIL, STARS, MESSAGE \
FROM   RATINGS_WITH_CUSTOMER_DATA \
WHERE  STARS < 3 \
  AND  CLUB_STATUS = 'platinum';\
\
* Goto the elastic UI and show this *\
\
*** END ***\
\
Useful fo\
Clear out all docker vols and containers and images:\
\
\pard\pardeftab1120\partightenfactor0
\cf0 docker container stop $(docker container ls -a -q) && docker system prune -a -f --volumes\
\pard\pardeftab1120\pardirnatural\partightenfactor0
\cf0 \
\
Stop:\
\
Containers:\
docker container stop $(docker container ls -a -q)\
\
\
Remove:\
\
Containers:\
 docker container rm $(docker container ls -a -q)\
Images:\
 docker image rm $(docker image ls -a -q)\
Volumes:\
 docker volume rm $(docker volume ls -q)\
Networks:\
 docker network rm $(docker network ls -q)}